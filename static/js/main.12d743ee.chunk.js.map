{"version":3,"sources":["api.ts","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/Loader/Loader.tsx","components/PeopleBlock/PeopleBlock.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","to","slug","className","classNames","sex","name","PeopleTable","people","selectedPersonSlug","map","born","died","mother","motherName","father","fatherName","Loader","PeopleBlock","useState","setPeople","isWait","setIsWait","isError","setIsError","useParams","personSlug","fetchPeople","useEffect","peopleWithFamilySlug","useMemo","child","find","motherPerson","fatherPerson","length","PeoplePage","App","role","isActive","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.12d743ee.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={classNames({ 'has-text-danger': person.sex === 'f' })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  people: Person[];\n  selectedPersonSlug: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  selectedPersonSlug,\n}) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={classNames(\n              { 'has-background-warning': person.slug === selectedPersonSlug },\n            )}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {\n                person.mother\n                  ? (<PersonLink person={person.mother} />)\n                  : (person.motherName || '-')\n              }\n            </td>\n            <td>\n              {\n                person.father\n                  ? (<PersonLink person={person.father} />)\n                  : (person.fatherName || '-')\n              }\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { PeopleTable } from '../PeopleTable';\nimport { Loader } from '../Loader';\n\nexport const PeopleBlock = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isWait, setIsWait] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { personSlug = '0' } = useParams();\n\n  const fetchPeople = async () => {\n    try {\n      setPeople(await getPeople());\n    } catch (error) {\n      setIsError(true);\n    }\n\n    setIsWait(false);\n  };\n\n  useEffect(() => {\n    setIsWait(true);\n    fetchPeople();\n  }, []);\n\n  const peopleWithFamilySlug = useMemo(() => people.map(child => {\n    const mother = people\n      .find(motherPerson => motherPerson.name === child.motherName);\n    const father = people\n      .find(fatherPerson => fatherPerson.name === child.fatherName);\n\n    return {\n      ...child,\n      mother,\n      father,\n    };\n  }), [people]);\n\n  if (isWait) {\n    return (<Loader />);\n  }\n\n  if (isError) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  if (peopleWithFamilySlug.length === 0) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  return (\n    <PeopleTable\n      people={peopleWithFamilySlug}\n      selectedPersonSlug={personSlug}\n    />\n  );\n};\n","import { PeopleBlock } from '../PeopleBlock';\n\nexport const PeoplePage = () => (\n  <>\n    <h1 className=\"title\">People Page</h1>\n\n    <div className=\"box table-container\">\n      <div className=\"block\">\n        <PeopleBlock />\n      </div>\n    </div>\n  </>\n);\n","import './App.scss';\n\nimport {\n  NavLink,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              className={({ isActive }) => (\n                classNames(\n                  'navbar-item',\n                  { 'has-background-grey-lighter': isActive },\n                )\n              )}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              className={({ isActive }) => (\n                classNames(\n                  'navbar-item',\n                  { 'has-background-grey-lighter': isActive },\n                )\n              )}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n\n            <Route\n              path=\"/people\"\n              element={<PeoplePage />}\n            />\n\n            <Route\n              path=\"/people/:personSlug\"\n              element={<PeoplePage />}\n            />\n\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}